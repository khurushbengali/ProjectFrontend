// Generated by PEG.js v0.11.0, https://pegjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found, location) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "(";
  var peg$c1 = ")";
  var peg$c2 = "-";
  var peg$c3 = "!";
  var peg$c4 = "+";
  var peg$c5 = "*";
  var peg$c6 = "/";
  var peg$c7 = "%";
  var peg$c8 = "<";
  var peg$c9 = "<=";
  var peg$c10 = ">";
  var peg$c11 = ">=";
  var peg$c12 = "===";
  var peg$c13 = "!==";
  var peg$c14 = ".";
  var peg$c15 = "true";
  var peg$c16 = "false";
  var peg$c17 = "undefined";
  var peg$c18 = "func";
  var peg$c19 = "{";
  var peg$c20 = "}";
  var peg$c21 = ",";
  var peg$c22 = "var";
  var peg$c23 = "=";
  var peg$c24 = "if";
  var peg$c25 = "else";
  var peg$c26 = "for";
  var peg$c27 = "go";
  var peg$c28 = "return";
  var peg$c29 = "string";
  var peg$c30 = "bool";
  var peg$c31 = "int";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[a-zA-Z_]/;
  var peg$r2 = /^[a-zA-Z_0-9]/;
  var peg$r3 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation("(", false);
  var peg$e1 = peg$literalExpectation(")", false);
  var peg$e2 = peg$literalExpectation("-", false);
  var peg$e3 = peg$literalExpectation("!", false);
  var peg$e4 = peg$literalExpectation("+", false);
  var peg$e5 = peg$literalExpectation("*", false);
  var peg$e6 = peg$literalExpectation("/", false);
  var peg$e7 = peg$literalExpectation("%", false);
  var peg$e8 = peg$literalExpectation("<", false);
  var peg$e9 = peg$literalExpectation("<=", false);
  var peg$e10 = peg$literalExpectation(">", false);
  var peg$e11 = peg$literalExpectation(">=", false);
  var peg$e12 = peg$literalExpectation("===", false);
  var peg$e13 = peg$literalExpectation("!==", false);
  var peg$e14 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e15 = peg$literalExpectation(".", false);
  var peg$e16 = peg$literalExpectation("true", false);
  var peg$e17 = peg$literalExpectation("false", false);
  var peg$e18 = peg$literalExpectation("func", false);
  var peg$e19 = peg$literalExpectation("{", false);
  var peg$e20 = peg$literalExpectation("}", false);
  var peg$e21 = peg$literalExpectation(",", false);
  var peg$e22 = peg$literalExpectation("var", false);
  var peg$e23 = peg$literalExpectation("=", false);
  var peg$e24 = peg$literalExpectation("if", false);
  var peg$e25 = peg$literalExpectation("else", false);
  var peg$e26 = peg$literalExpectation("for", false);
  var peg$e27 = peg$literalExpectation("go", false);
  var peg$e28 = peg$literalExpectation("return", false);
  var peg$e29 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e30 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false);
  var peg$e31 = peg$literalExpectation("string", false);
  var peg$e32 = peg$literalExpectation("bool", false);
  var peg$e33 = peg$literalExpectation("int", false);
  var peg$e34 = peg$otherExpectation("whitespace");

  var peg$f0 = function(programs) { return programs; };
  var peg$f1 = function(declarations) {
        return {
          tag: "seq",
          stmts: declarations
        };
      };
  var peg$f2 = function(head, tail) {
        return tail.reduce((result, element) => {
          return {
            tag: "binop",
            sym: element[1],
            frst: result,
            scnd: element[3]
          };
        }, head);
      };
  var peg$f3 = function(sym) {
        return {
          tag: "nam",
          sym: sym
        }
      };
  var peg$f4 = function(val) {
        return {
          tag: "lit",
          val: val
        }
      };
  var peg$f5 = function(sym, frst) {
        return {
          tag: "unop",
          sym: sym,
          frst: frst
        }
      };
  var peg$f6 = function(digits, decimal) {
        return parseFloat(digits.join("") + (decimal ? decimal.join('') : ''));
      };
  var peg$f7 = function() {
        return true;
      };
  var peg$f8 = function() {
        return false;
      };
  var peg$f9 = function() {
        return {
          tag: "nam",
          sym: "undefined"
        }
      };
  var peg$f10 = function(sym, prms, returnType, body) {
        return {
          tag: "fun",
          sym: sym,
          prms: prms,
          body: body,
          returnType: returnType
        };
      };
  var peg$f11 = function(fun, args) {
        return {
          tag: "app",
          fun: {tag: "nam", sym: fun},
          args: args.reverse()
        }
      };
  var peg$f12 = function(first, rest) {
        return [first].concat(rest.map(e => e[3]));
      };
  var peg$f13 = function(nameType, val) {
        return {
          tag: "var",
          name: nameType.name,
          type: nameType.type,
          val: val
        };
      };
  var peg$f14 = function(sym, expr) {
        return {
          tag: "assmt",
          sym: sym,
          expr: expr
        }
      };
  var peg$f15 = function(pred, cons, alt) {
        return {
          tag: "cond",
          pred: pred,
          cons: cons,
          alt: alt
        }
      };
  var peg$f16 = function(pred, body) {
        return {
          tag: "for",
          pred: pred,
          body: body
        };
      };
  var peg$f17 = function(statements) {
        return {
          tag: "seq",
          stmts: statements
        };
      };
  var peg$f18 = function(fun, args) {
      return {
          tag: "goroutines",
          fun: {tag: "nam", sym: fun},
          args: args.reverse()
      }
  };
  var peg$f19 = function(expr) {
      return {
        tag: "ret",
        expr: expr
      };
    };
  var peg$f20 = function(name, type) {
        return {
          name: name,
          type: type
        }
      };
  var peg$f21 = function() {
        return text();
      };
  var peg$f22 = function() {
        return text()
      };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found, location),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseprogram();
    s3 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f0(s2);

    return s0;
  }

  function peg$parseprogram() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parsetest();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsetest();
    }
    s3 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f1(s2);

    return s0;
  }

  function peg$parsetest() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsefunctionDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefunctionApplication();
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsebinary_operator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseoperand();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsebinary_operator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseoperand();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperand() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseunop();
    if (s0 === peg$FAILED) {
      s0 = peg$parseliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenam();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e0);
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseexpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              rule$expects(peg$e1);
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c1;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsestatement() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsevariableDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parseconditional();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsereturn();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefunctionApplication();
            if (s0 === peg$FAILED) {
              s0 = peg$parsegoroutine();
              if (s0 === peg$FAILED) {
                s0 = peg$parseforLoop();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenam() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseliteral() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseliteral_values();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseliteral_values() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsenumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetrue();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefalse();
      }
    }

    return s0;
  }

  function peg$parseunop() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseunary_operator();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseoperand();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f5(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunary_operator() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e2);
    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e3);
      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c3;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebinary_operator() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e4);
    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e2);
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c2;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e5);
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c5;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e6);
          if (input.charCodeAt(peg$currPos) === 47) {
            s0 = peg$c6;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e7);
            if (input.charCodeAt(peg$currPos) === 37) {
              s0 = peg$c7;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              rule$expects(peg$e8);
              if (input.charCodeAt(peg$currPos) === 60) {
                s0 = peg$c8;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                rule$expects(peg$e9);
                if (input.substr(peg$currPos, 2) === peg$c9) {
                  s0 = peg$c9;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  rule$expects(peg$e10);
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s0 = peg$c10;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    rule$expects(peg$e11);
                    if (input.substr(peg$currPos, 2) === peg$c11) {
                      s0 = peg$c11;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      rule$expects(peg$e12);
                      if (input.substr(peg$currPos, 3) === peg$c12) {
                        s0 = peg$c12;
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        rule$expects(peg$e13);
                        if (input.substr(peg$currPos, 3) === peg$c13) {
                          s0 = peg$c13;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    rule$expects(peg$e14);
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        rule$expects(peg$e14);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      rule$expects(peg$e15);
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        rule$expects(peg$e14);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            rule$expects(peg$e14);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f6(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetrue() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e16);
    if (input.substr(peg$currPos, 4) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefalse() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e17);
    if (input.substr(peg$currPos, 5) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseundefined() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefunctionDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e18);
    if (input.substr(peg$currPos, 4) === peg$c18) {
      s2 = peg$c18;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseidentifier();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        rule$expects(peg$e0);
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c0;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsenameTypePairs();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          rule$expects(peg$e1);
          if (input.charCodeAt(peg$currPos) === 41) {
            s10 = peg$c1;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parsetype();
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$parse_();
            rule$expects(peg$e19);
            if (input.charCodeAt(peg$currPos) === 123) {
              s14 = peg$c19;
              peg$currPos++;
            } else {
              s14 = peg$FAILED;
            }
            if (s14 !== peg$FAILED) {
              s15 = peg$parse_();
              s16 = peg$parsefunctionBody();
              s17 = peg$parse_();
              rule$expects(peg$e20);
              if (input.charCodeAt(peg$currPos) === 125) {
                s18 = peg$c20;
                peg$currPos++;
              } else {
                s18 = peg$FAILED;
              }
              if (s18 !== peg$FAILED) {
                s19 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f10(s4, s8, s12, s16);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionApplication() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseidentifier();
    if (s2 !== peg$FAILED) {
      rule$expects(peg$e0);
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseargs();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          rule$expects(peg$e1);
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f11(s2, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseargs() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseexpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e21);
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c21;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e21);
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e22);
    if (input.substr(peg$currPos, 3) === peg$c22) {
      s2 = peg$c22;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsenameTypePair();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        rule$expects(peg$e23);
        if (input.charCodeAt(peg$currPos) === 61) {
          s6 = peg$c23;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = peg$parseliteral();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f13(s4, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseidentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      rule$expects(peg$e23);
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c23;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseexpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f14(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditional() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e24);
    if (input.substr(peg$currPos, 2) === peg$c24) {
      s2 = peg$c24;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseexpression();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        rule$expects(peg$e19);
        if (input.charCodeAt(peg$currPos) === 123) {
          s6 = peg$c19;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsestatement();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          rule$expects(peg$e20);
          if (input.charCodeAt(peg$currPos) === 125) {
            s10 = peg$c20;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            rule$expects(peg$e25);
            if (input.substr(peg$currPos, 4) === peg$c25) {
              s12 = peg$c25;
              peg$currPos += 4;
            } else {
              s12 = peg$FAILED;
            }
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$parse_();
            rule$expects(peg$e19);
            if (input.charCodeAt(peg$currPos) === 123) {
              s14 = peg$c19;
              peg$currPos++;
            } else {
              s14 = peg$FAILED;
            }
            if (s14 === peg$FAILED) {
              s14 = null;
            }
            s15 = peg$parse_();
            s16 = peg$parsestatement();
            if (s16 === peg$FAILED) {
              s16 = null;
            }
            s17 = peg$parse_();
            rule$expects(peg$e20);
            if (input.charCodeAt(peg$currPos) === 125) {
              s18 = peg$c20;
              peg$currPos++;
            } else {
              s18 = peg$FAILED;
            }
            if (s18 === peg$FAILED) {
              s18 = null;
            }
            s19 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f15(s4, s8, s16);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseforLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e26);
    if (input.substr(peg$currPos, 3) === peg$c26) {
      s2 = peg$c26;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseexpression();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      rule$expects(peg$e19);
      if (input.charCodeAt(peg$currPos) === 123) {
        s6 = peg$c19;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parseforBody();
        s9 = peg$parse_();
        rule$expects(peg$e20);
        if (input.charCodeAt(peg$currPos) === 125) {
          s10 = peg$c20;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
        }
        if (s10 !== peg$FAILED) {
          s11 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f16(s4, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseforInit() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsevariableDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parseassignment();
    }

    return s0;
  }

  function peg$parseforBody() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsestatement();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsestatement();
    }
    peg$savedPos = s0;
    s1 = peg$f17(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsegoroutine() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e27);
    if (input.substr(peg$currPos, 2) === peg$c27) {
      s2 = peg$c27;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseidentifier();
      if (s4 !== peg$FAILED) {
        rule$expects(peg$e0);
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c0;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseargs();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            rule$expects(peg$e1);
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f18(s4, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereturn() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e28);
    if (input.substr(peg$currPos, 6) === peg$c28) {
      s2 = peg$c28;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseexpression();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f19(s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionBody() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsestatement();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsestatement();
    }
    peg$savedPos = s0;
    s1 = peg$f17(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsenameTypePairs() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsenameTypePair();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e21);
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c21;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsenameTypePair();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e21);
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsenameTypePair();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenameTypePair() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsetype();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f20(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifiers() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c21;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseidentifier();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseidentifier();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e29);
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      rule$expects(peg$e30);
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        rule$expects(peg$e30);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f21();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetype() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseint();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebool();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring();
      }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e31);
    if (input.substr(peg$currPos, 6) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebool() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e32);
    if (input.substr(peg$currPos, 4) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseint() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e33);
    if (input.substr(peg$currPos, 3) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21();
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e34);
    peg$silentFails++;
    s0 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }
    peg$silentFails--;

    return s0;
  }

  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
